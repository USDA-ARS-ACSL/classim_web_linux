/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RegisterImport } from './routes/register'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutWeatherImport } from './routes/_layout/weather'
import { Route as LayoutSoilImport } from './routes/_layout/soil'
import { Route as LayoutSiteImport } from './routes/_layout/site'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutSeasonalOutputcopyImport } from './routes/_layout/seasonalOutput copy'
import { Route as LayoutSeasonalOutputImport } from './routes/_layout/seasonalOutput'
import { Route as LayoutSeasonalImport } from './routes/_layout/seasonal'
import { Route as LayoutRotationBuilderOutputImport } from './routes/_layout/rotationBuilderOutput'
import { Route as LayoutRotationBuilderImport } from './routes/_layout/rotationBuilder'
import { Route as LayoutManagementoldImport } from './routes/_layout/management_old'
import { Route as LayoutManagementImport } from './routes/_layout/management'
import { Route as LayoutItemsImport } from './routes/_layout/items'
import { Route as LayoutExpertsystemImport } from './routes/_layout/expertsystem'
import { Route as LayoutCultivarImport } from './routes/_layout/cultivar'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as LayoutAboutImport } from './routes/_layout/about'
import { Route as LayoutWeatherTableImport } from './routes/_layout/WeatherTable'

// Create/Update Routes

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutWeatherRoute = LayoutWeatherImport.update({
  path: '/weather',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSoilRoute = LayoutSoilImport.update({
  path: '/soil',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSiteRoute = LayoutSiteImport.update({
  path: '/site',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSeasonalOutputcopyRoute = LayoutSeasonalOutputcopyImport.update({
  path: '/seasonalOutput copy',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSeasonalOutputRoute = LayoutSeasonalOutputImport.update({
  path: '/seasonalOutput',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSeasonalRoute = LayoutSeasonalImport.update({
  path: '/seasonal',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRotationBuilderOutputRoute =
  LayoutRotationBuilderOutputImport.update({
    path: '/rotationBuilderOutput',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutRotationBuilderRoute = LayoutRotationBuilderImport.update({
  path: '/rotationBuilder',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutManagementoldRoute = LayoutManagementoldImport.update({
  path: '/management_old',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutManagementRoute = LayoutManagementImport.update({
  path: '/management',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutItemsRoute = LayoutItemsImport.update({
  path: '/items',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutExpertsystemRoute = LayoutExpertsystemImport.update({
  path: '/expertsystem',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCultivarRoute = LayoutCultivarImport.update({
  path: '/cultivar',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAboutRoute = LayoutAboutImport.update({
  path: '/about',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutWeatherTableRoute = LayoutWeatherTableImport.update({
  path: '/WeatherTable',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/_layout/WeatherTable': {
      preLoaderRoute: typeof LayoutWeatherTableImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/about': {
      preLoaderRoute: typeof LayoutAboutImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/admin': {
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/cultivar': {
      preLoaderRoute: typeof LayoutCultivarImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/expertsystem': {
      preLoaderRoute: typeof LayoutExpertsystemImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/items': {
      preLoaderRoute: typeof LayoutItemsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/management': {
      preLoaderRoute: typeof LayoutManagementImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/management_old': {
      preLoaderRoute: typeof LayoutManagementoldImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/rotationBuilder': {
      preLoaderRoute: typeof LayoutRotationBuilderImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/rotationBuilderOutput': {
      preLoaderRoute: typeof LayoutRotationBuilderOutputImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/seasonal': {
      preLoaderRoute: typeof LayoutSeasonalImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/seasonalOutput': {
      preLoaderRoute: typeof LayoutSeasonalOutputImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/seasonalOutput copy': {
      preLoaderRoute: typeof LayoutSeasonalOutputcopyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/site': {
      preLoaderRoute: typeof LayoutSiteImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/soil': {
      preLoaderRoute: typeof LayoutSoilImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/weather': {
      preLoaderRoute: typeof LayoutWeatherImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  LayoutRoute.addChildren([
    LayoutWeatherTableRoute,
    LayoutAboutRoute,
    LayoutAdminRoute,
    LayoutCultivarRoute,
    LayoutExpertsystemRoute,
    LayoutItemsRoute,
    LayoutManagementRoute,
    LayoutManagementoldRoute,
    LayoutRotationBuilderRoute,
    LayoutRotationBuilderOutputRoute,
    LayoutSeasonalRoute,
    LayoutSeasonalOutputRoute,
    LayoutSeasonalOutputcopyRoute,
    LayoutSettingsRoute,
    LayoutSiteRoute,
    LayoutSoilRoute,
    LayoutWeatherRoute,
    LayoutIndexRoute,
  ]),
  LoginRoute,
  RecoverPasswordRoute,
  RegisterRoute,
  ResetPasswordRoute,
])

/* prettier-ignore-end */
